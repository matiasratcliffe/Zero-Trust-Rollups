{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brokerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestID",
          "type": "uint256"
        }
      ],
      "name": "requestSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "brokerContract",
      "outputs": [
        {
          "internalType": "contract ExecutionBroker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/BaseClient.sol",
    "1": "contracts/ClientImplementation.sol",
    "3": "contracts/Ownable.sol"
  },
  "ast": {
    "absolutePath": "contracts/ClientImplementation.sol",
    "exportedSymbols": {
      "BaseClient": [
        45
      ],
      "ClientImplementation": [
        60
      ],
      "ExecutionBroker": [
        341
      ],
      "Executors": [
        74
      ],
      "Ownable": [
        384
      ],
      "Request": [
        91
      ],
      "Submission": [
        98
      ],
      "Transferable": [
        468
      ]
    },
    "id": 61,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 47,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:31:1"
      },
      {
        "absolutePath": "contracts/BaseClient.sol",
        "file": "./BaseClient.sol",
        "id": 48,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 61,
        "sourceUnit": 46,
        "src": "70:26:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 49,
              "name": "BaseClient",
              "nameLocations": [
                "132:10:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 45,
              "src": "132:10:1"
            },
            "id": 50,
            "nodeType": "InheritanceSpecifier",
            "src": "132:10:1"
          }
        ],
        "canonicalName": "ClientImplementation",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 60,
        "linearizedBaseContracts": [
          60,
          45,
          384
        ],
        "name": "ClientImplementation",
        "nameLocation": "108:20:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 58,
              "nodeType": "Block",
              "src": "211:2:1",
              "statements": []
            },
            "id": 59,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 55,
                    "name": "brokerAddress",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 52,
                    "src": "196:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 56,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 54,
                  "name": "BaseClient",
                  "nameLocations": [
                    "185:10:1"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 45,
                  "src": "185:10:1"
                },
                "nodeType": "ModifierInvocation",
                "src": "185:25:1"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52,
                  "mutability": "mutable",
                  "name": "brokerAddress",
                  "nameLocation": "170:13:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 59,
                  "src": "162:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "162:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "161:23:1"
            },
            "returnParameters": {
              "id": 57,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "211:0:1"
            },
            "scope": 60,
            "src": "150:63:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 61,
        "src": "99:2423:1",
        "usedErrors": []
      }
    ],
    "src": "37:2485:1"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161017038038061017083398101604081905261002f91610062565b600080546001600160a01b03199081163317909155600180546001600160a01b0390931692909116919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b60d0806100a06000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80638da5cb5b1460415780638f32d59b14606b578063c2c56245146088575b600080fd5b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b0316331460405190151581526020016062565b600154604e906001600160a01b03168156fea264697066735822122038716caeff058b011f211680f4f7e3acb9029a710d32986e8359605e0e79c36a64736f6c63430008130033",
  "bytecodeSha1": "572154e39ee19d978a9fb235529857f7759e3769",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.19+commit.7dd6d404"
  },
  "contractName": "ClientImplementation",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {},
      "3": {}
    },
    "statements": {
      "0": {},
      "1": {},
      "3": {
        "Ownable.isOwner": {
          "1": [
            375,
            402
          ]
        },
        "Ownable.owner": {
          "0": [
            307,
            320
          ]
        }
      }
    }
  },
  "dependencies": [
    "BaseClient",
    "Ownable"
  ],
  "deployedBytecode": "6080604052348015600f57600080fd5b5060043610603c5760003560e01c80638da5cb5b1460415780638f32d59b14606b578063c2c56245146088575b600080fd5b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b0316331460405190151581526020016062565b600154604e906001600160a01b03168156fea264697066735822122038716caeff058b011f211680f4f7e3acb9029a710d32986e8359605e0e79c36a64736f6c63430008130033",
  "deployedSourceMap": "99:2423:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;259:64:3;296:7;314:6;-1:-1:-1;;;;;314:6:3;259:64;;;-1:-1:-1;;;;;178:32:5;;;160:51;;148:2;133:18;259:64:3;;;;;;;;328:77;367:4;396:6;-1:-1:-1;;;;;396:6:3;382:10;:20;328:77;;387:14:5;;380:22;362:41;;350:2;335:18;328:77:3;222:187:5;321:37:0;;;;;-1:-1:-1;;;;;321:37:0;;",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    99,
    2522
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH1 0x41 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH1 0x6B JUMPI DUP1 PUSH4 0xC2C56245 EQ PUSH1 0x88 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x62 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE PUSH18 0x6CAEFF058B011F211680F4F7E3ACB9029A71 0xD ORIGIN SWAP9 PUSH15 0x8359605E0E79C36A64736F6C634300 ADDMOD SGT STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xF"
    },
    "10": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "11": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "DUP1",
      "path": "1"
    },
    "14": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "REVERT",
      "path": "1"
    },
    "15": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "POP",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "19": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "20": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "LT",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3C"
    },
    "23": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "24": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "26": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "27": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "29": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "SHR",
      "path": "1"
    },
    "30": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "DUP1",
      "path": "1"
    },
    "31": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8DA5CB5B"
    },
    "36": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "EQ",
      "path": "1"
    },
    "37": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x41"
    },
    "39": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "40": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "DUP1",
      "path": "1"
    },
    "41": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8F32D59B"
    },
    "46": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "EQ",
      "path": "1"
    },
    "47": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x6B"
    },
    "49": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "DUP1",
      "path": "1"
    },
    "51": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xC2C56245"
    },
    "56": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "EQ",
      "path": "1"
    },
    "57": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x88"
    },
    "59": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "60": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "63": {
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "DUP1",
      "path": "1"
    },
    "64": {
      "first_revert": true,
      "fn": null,
      "offset": [
        99,
        2522
      ],
      "op": "REVERT",
      "path": "1"
    },
    "65": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "66": {
      "fn": "Ownable.owner",
      "offset": [
        296,
        303
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "68": {
      "fn": "Ownable.owner",
      "offset": [
        314,
        320
      ],
      "op": "SLOAD",
      "path": "3",
      "statement": 0
    },
    "69": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "71": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "73": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "75": {
      "op": "SHL"
    },
    "76": {
      "op": "SUB"
    },
    "77": {
      "fn": "Ownable.owner",
      "offset": [
        314,
        320
      ],
      "op": "AND",
      "path": "3"
    },
    "78": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "79": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "81": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "82": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "84": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "86": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "88": {
      "op": "SHL"
    },
    "89": {
      "op": "SUB"
    },
    "90": {
      "op": "SWAP1"
    },
    "91": {
      "op": "SWAP2"
    },
    "92": {
      "op": "AND"
    },
    "93": {
      "op": "DUP2"
    },
    "94": {
      "op": "MSTORE"
    },
    "95": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "97": {
      "op": "ADD"
    },
    "98": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "99": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "101": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "102": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "DUP1",
      "path": "3"
    },
    "103": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "104": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "SUB",
      "path": "3"
    },
    "105": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "106": {
      "fn": "Ownable.owner",
      "offset": [
        259,
        323
      ],
      "op": "RETURN",
      "path": "3"
    },
    "107": {
      "fn": "Ownable.isOwner",
      "offset": [
        328,
        405
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "108": {
      "fn": "Ownable.isOwner",
      "offset": [
        367,
        371
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "110": {
      "fn": "Ownable.isOwner",
      "offset": [
        396,
        402
      ],
      "op": "SLOAD",
      "path": "3",
      "statement": 1
    },
    "111": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "115": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "117": {
      "op": "SHL"
    },
    "118": {
      "op": "SUB"
    },
    "119": {
      "fn": "Ownable.isOwner",
      "offset": [
        396,
        402
      ],
      "op": "AND",
      "path": "3"
    },
    "120": {
      "fn": "Ownable.isOwner",
      "offset": [
        382,
        392
      ],
      "op": "CALLER",
      "path": "3"
    },
    "121": {
      "fn": "Ownable.isOwner",
      "offset": [
        382,
        402
      ],
      "op": "EQ",
      "path": "3"
    },
    "122": {
      "fn": "Ownable.isOwner",
      "offset": [
        328,
        405
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "124": {
      "fn": "Ownable.isOwner",
      "offset": [
        328,
        405
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "125": {
      "op": "SWAP1"
    },
    "126": {
      "op": "ISZERO"
    },
    "127": {
      "op": "ISZERO"
    },
    "128": {
      "op": "DUP2"
    },
    "129": {
      "op": "MSTORE"
    },
    "130": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "132": {
      "op": "ADD"
    },
    "133": {
      "fn": "Ownable.isOwner",
      "offset": [
        328,
        405
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x62"
    },
    "135": {
      "op": "JUMP"
    },
    "136": {
      "offset": [
        321,
        358
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "137": {
      "fn": "Ownable.isOwner",
      "offset": [
        321,
        358
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "139": {
      "fn": "Ownable.isOwner",
      "offset": [
        321,
        358
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "140": {
      "fn": "Ownable.isOwner",
      "offset": [
        321,
        358
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4E"
    },
    "142": {
      "fn": "Ownable.isOwner",
      "offset": [
        321,
        358
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "143": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "145": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "147": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "149": {
      "op": "SHL"
    },
    "150": {
      "op": "SUB"
    },
    "151": {
      "offset": [
        321,
        358
      ],
      "op": "AND",
      "path": "0"
    },
    "152": {
      "fn": "Ownable.isOwner",
      "offset": [
        321,
        358
      ],
      "op": "DUP2",
      "path": "0"
    },
    "153": {
      "fn": "Ownable.isOwner",
      "offset": [
        321,
        358
      ],
      "op": "JUMP",
      "path": "0"
    }
  },
  "sha1": "7fe18764894c15aaaf2f61c0e138af4cb42f8694",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./BaseClient.sol\";\n\n\ncontract ClientImplementation is BaseClient {\n\n    constructor(address brokerAddress) BaseClient(brokerAddress) {}\n/*\n    function clientLogic(ClientInput calldata input) external override pure returns (bytes memory) {\n        bytes memory output = \"\";\n        if (input.functionToRun == 1) { output = functionOne(input.data); }\n        else if (input.functionToRun == 2) { output = functionTwo(input.data); }\n        else if (input.functionToRun == 3) { output = functionThree(input.data); }\n        return output;\n    }\n\n    struct OneInput {uint counter;}\n    function functionOne(bytes memory data) private pure returns (bytes memory) {\n        OneInput memory input = abi.decode(data, (OneInput));\n        return abi.encode(input.counter * 10);\n    }\n\n    struct TwoInput {uint counter;}\n    function functionTwo(bytes memory data) private pure returns (bytes memory) {\n        TwoInput memory input = abi.decode(data, (TwoInput));\n        return abi.encode(input.counter + 7);\n    }\n\n    struct ThreeInput {uint counter;}\n    function functionThree(bytes memory data) private pure returns (bytes memory) {\n        ThreeInput memory input = abi.decode(data, (ThreeInput));\n        return abi.encode(input.counter + 4);\n    }\n\n    function getInputStructure(uint functionID) external override pure returns (string memory) {\n        if (functionID == 1) { return \"{uint counter;}\"; }\n        else if (functionID == 2) { return \"{uint counter;}\"; }\n        else if (functionID == 3) { return \"{uint counter;}\"; }\n        else { return \"Indavild function ID\"; }\n    }\n\n    function processResult(bytes calldata result) external onlyBroker override {\n        require(address(this).balance >= 1000 gwei, \"Insufficient funds\");\n        uint functionToRun;\n        uint counter = abi.decode(result, (uint));\n        if (counter < 100) {\n            if (counter % 10 == 0) {\n                if ((counter/10) % 2 == 0) {\n                    functionToRun = 2;\n                } else {\n                    functionToRun = 3;\n                }\n            } else {\n                functionToRun = 1;\n            }\n        }\n        ClientInput memory input = ClientInput({\n            functionToRun: functionToRun,\n            data: abi.encode(counter)\n        });\n        uint requestID = brokerContract.submitRequest{value: 1000 gwei}(input, 200000 wei, 1000 gwei, 1 minutes);\n        emit requestSubmitted(requestID);\n    }*/\n}",
  "sourceMap": "99:2423:1:-:0;;;150:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;234:6:3;:19;;-1:-1:-1;;;;;;234:19:3;;;243:10;234:19;;;;;499:47:0;;-1:-1:-1;;;;;499:47:0;;;;;;;;;;;;;99:2423:1;;14:290:5;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:5;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:5:o;:::-;99:2423:1;;;;;;",
  "sourcePath": "contracts/ClientImplementation.sol",
  "type": "contract"
}